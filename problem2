% Christian Chapman
% AE 502
% Problem 2

r1 = [5000 10000 2100];
r2 = [-14600 2500 7000];
t = 60*60*1;
mu = 398600;

[v1vec,v2vec] = lambert(r1,r2,mu,t)

function [v1vec,v2vec] = lambert(r1vec,r2vec,mu,dt)
% calculate magnitudes
r1 = norm(r1vec);
r2 = norm(r2vec);
% calculate dtheta for a prograde and a retrograde orbit depending on the K
% component of the cross between r1 and r2
% cross check
check = cross(r1vec,r2vec);
if check(1,3) < 0
    dthetap = 360 - acosd(dot(r1vec,r2vec)/(r1*r2)); % prograde
    dthetar = acosd(dot(r1vec,r2vec)/(r1*r2)); % retrograde
else
    dthetap = acosd(dot(r1vec,r2vec)/(r1*r2)); % prograde
    dthetar = 360 - acosd(dot(r1vec,r2vec)/(r1*r2)); % retrograde
end
% the rest of code will calculate the prograde and retrograde result and
% take the lower dv at the end as the result

% calculate A
Ap = sind(dthetap)*sqrt((r1*r2)/(1 - cosd(dthetap))); % prograde
Ar = sind(dthetar)*sqrt((r1*r2)/(1 - cosd(dthetar))); % retrograde

% by iteration, solve for z
% z is the primary input to the stumpff functions
% from Curtis Chap 5, "Since we do not know what the orbit is, setting z =
% 0 seems as reasonable, simple choice."
% this is not the case for the pork chop plot purpose, but for problem 2
% and the sake of showing that I created a lambert solver that's what ill
% use

% whenever you see r or p at the end of a variable, associate that with
% prograde/retrograde orbits
zr = 0;
zp = 0;
tol = 1;
it = 0;

while abs(tol) > 1e-8
    % depending on trajectory, determine C and S
    if zp > 0
        Cp = (1 - cos(sqrt(zp)))/zp;
        Sp = (sqrt(zp) - sin(sqrt(zp)))/zp^(3/2);
    elseif zp < 0
        Cp = (cosh(sqrt(-zp)) - 1)/(-zp);
        Sp = (sinh(sqrt(-zp)) - sqrt(-zp))/(-zp)^(3/2);
    else
        Cp = 1/2;
        Sp = 1/6;
    end
    yp = r1 + r2 + Ap*((zp*Sp - 1)/sqrt(Cp));
    funcp = (yp/Cp)^(3/2) * Sp + Ap*sqrt(yp) - sqrt(mu)*dt;
    if zp ~= 0
        fprimep = (yp/Cp)^(3/2) * ((1/(2*zp))*(Cp - (3/2)*(Sp/Cp)) + (3/4)*(Sp^2 / Cp)) + (Ap/8)*(3*Sp*sqrt(yp)/Cp + Ap*sqrt(Cp/yp));
    else
        fprimep = (sqrt(2)/40)*yp^(3/2) + (Ap/8)*(sqrt(yp) + Ap*sqrt(1/(2*yp)));
    end

    tol = funcp/fprimep;
    zp = zp - tol;
    it = it + 1;
    if it > 1000
        zp = 1000;
        break
    end
end
% reset variables for retrograde
tol = 1;
it = 0;

while abs(tol) > 1e-8
    % depending on trajectory, determine C and S
    if zr > 0
        Cr = (1 - cos(sqrt(zr)))/zr;
        Sr = (sqrt(zr) - sin(sqrt(zr)))/zr^(3/2);
    elseif zr < 0
        Cr = (cosh(sqrt(-zr)) - 1)/(-zr);
        Sr = (sinh(sqrt(-zr)) - sqrt(-zr))/(-zr)^(3/2);
    else
        Cr = 1/2;
        Sr = 1/6;
    end
    yr = r1 + r2 + Ar*((zr*Sr - 1)/sqrt(Cr));
    funcr = (yr/Cr)^(3/2) * Sr + Ar*sqrt(yr) - sqrt(mu)*dt;
    if zr ~= 0
        fprimer = (yr/Cr)^(3/2) * ((1/(2*zr))*(Cr - (3/2)*(Sr/Cr)) + (3/4)*(Sr^2 / Cr)) + (Ar/8)*(3*Sr*sqrt(yr)/Cr + Ar*sqrt(Cr/yr));
    else
        fprimer = (sqrt(2)/40)*yr^(3/2) + (Ar/8)*(sqrt(yr) + Ar*sqrt(1/(2*yr)));
    end
    tol = funcr/fprimer;
    zr = zr - tol;
    it = it + 1;
    if it > 1000
        zr = 1000;
        break
    end
end

zr = zr + tol;
zp = zp + tol;
% calculate y
yr = r1 + r2 + Ar*((zr*Sr - 1)/sqrt(Cr));
yp = r1 + r2 + Ap*((zp*Sp - 1)/sqrt(Cp));
% calculate the lagrange f, g, and gdot functions
fp = 1 - yp/r1;
gp = Ap * sqrt(yp/mu);
gdotp = 1 - yp/r2;

fr = 1 - yr/r1;
gr = Ar * sqrt(yr/mu);
gdotr = 1 - yr/r2;
% calculate v1vec and v2vec for prograde and retrograde options
v1vecr = (1/gr)*(r2vec - fr*r1vec);
v2vecr = (1/gr)*(gdotr*r2vec - r1vec);
v1r = norm(v1vecr);
v2r = norm(v2vecr);
dvr = abs(v1r) + abs(v2r);

v1vecp = (1/gp)*(r2vec - fp*r1vec);
v2vecp = (1/gp)*(gdotp*r2vec - r1vec);
v1p = norm(v1vecp);
v2p = norm(v2vecp);
dvp = abs(v1p) + abs(v2p);
% find the minimum dv between the prograde and retrograde options
if dvp < dvr
    dv = dvp;
    v1vec = v1vecp;
    v2vec = v2vecp;
    z = zp;
elseif dvp > dvr
    dv = dvr;
    v1vec = v1vecr;
    v2vec = v2vecr;
    z = zr;
else
    % if dv's equal, just choose retrograde
    dv = dvr;
    v1vec = v1vecr;
    v2vec = v2vecr;
    z = zr;
end
% output v1vec and v2vec
end
